<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux系统挂载SMB共享</title>
      <link href="/2024/08/15/Linux%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BDSMB%E5%85%B1%E4%BA%AB/"/>
      <url>/2024/08/15/Linux%E7%B3%BB%E7%BB%9F%E6%8C%82%E8%BD%BDSMB%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统挂载SMB共享"><a href="#Linux系统挂载SMB共享" class="headerlink" title="Linux系统挂载SMB共享"></a>Linux系统挂载SMB共享</h1><hr><h2 id="安装CIFS客户端"><a href="#安装CIFS客户端" class="headerlink" title="安装CIFS客户端"></a>安装CIFS客户端</h2><table><tr>    <th>操作系统</th> <th>说明</th></tr><tr>    <td><br>Ubuntu<br><br></td>    <td rowspan=2>通过apt-get软件包管理工具进行安装。<br><code>sudo apt-get update  <br><br>  sudo apt-get install cifs-utils</code></td></tr><td>Debian</td><tr>    <td>RHEL</td>    <td rowspan=3>通过yum包管理器进行安装。<br><code>sudo yum install cifs-utils</code></td></tr><td>CentOS</td><tr><td>Alibaba Cloud Linux</td></tr><tr>    <td>OpenSUSE</td>    <td rowspan=2> 通过zypper工具进行安装。<br><code>sudo zypper install cifs-utils</code></td></tr><td>SLES12-SP2</td><tr>    <td>CoreOS</td>    <td>通过以下方法进行安装：<br>        <h4 style="text-indent: 25px">a.配置SELINUX。<br></h4>            <ul><p><code>sed -i 's/SELINUXTYPE=mcs/SELINUXTYPE=targeted/' /etc/selinux/config</code></p></ul>        <h4 style="text-indent: 25px">b.在CoreOS操作系统上手动编译CIFS客户端工具。<br></h4> <ul  style="text-indent: 30px"><p>您可以参照以下步骤启动一个Fedora容器用以编译CIFS客户端工具。或下载阿里云官方提供的名CoreOS版本的CIFS工具包，并拷贝至/tmp/或者/bin目录。</p></ul>            <ul>            <h6 style="text-indent: 25px">i.在CoreOS上启动一个Fedora容器自行编译cifs-utils。</h6>            <ul><p style="font-size: 15px;"><code>docker run -t -i -v /tmp:/cifs fedora /bin/bash</code></p></ul>            <h6 style="text-indent: 25px">ii.在docker环境内依次运行以下命令。</h6>            <ul><p style="font-size: 15px;">1.<code>yum groupinstall -y "Development Tools" "Development Libraries"</code></p>            <p style="font-size: 15px;">2.<code>yum install -y bzip2</code></p>            <p style="font-size: 15px;">3.<code>curl https://download.samba.org/pub/linux-cifs/cifs-utils/cifs-utils-6.9.tar.bz2 --output cifs-utils-6.9.tar.bz2;</code></p>            <p style="font-size: 15px;">4.<code>bunzip2 cifs-utils-6.9.tar.bz2 && tar xvf cifs-utils-6.9.tar</code></p>            <p style="font-size: 15px;">5.<code>cd cifs-utils-6.9; ./configure && make</code></p>            <p style="font-size: 15px;">6.<code>cp mount.cifs /cifs/</code></p>            <p style="font-size: 15px;">7.<code>exit</code></p></ul>            </ul>    </td></tr></table><h2 id="挂载SMB协议文件系统"><a href="#挂载SMB协议文件系统" class="headerlink" title="挂载SMB协议文件系统"></a>挂载SMB协议文件系统</h2><h3 id="1-手动挂载文件系统"><a href="#1-手动挂载文件系统" class="headerlink" title="1. 手动挂载文件系统"></a>1. 手动挂载文件系统</h3><ol><li>使用SSH连接VPS(Linux)</li><li>执行以下命令，挂载文件系统。</li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mount -t cifs //SERVER/SHARE /mnt -o vers=2.0,username=USERNAME,password=PASSWORD,uid=0,gid=0,dir_mode=0755,file_mode=0755,mfsymlinks,cache=strict</span><br></pre></td></tr></table></figure><p><b>挂载命令格式为：</b><code> sudo mount -t cifs //&lt;挂载点地址&gt;/share &lt;挂载目录&gt; -o &lt;挂载选项&gt;</code></p><table><tr>    <th>参数</th><th>说明</th></tr><tr>    <td>文件系统类型</td><td>在Linux操作系统中挂载SMB协议文件系统，必须配置-t cifs参数。</td></tr><tr>    <td>挂载点地址</td><td>添加文件系统挂载点时，自动生成的挂载点地址，请根据实际值替换。您可以在NAS控制台，单击目标文件系统，然后单击挂载使用，将鼠标放置在挂载点地址列的挂载点图标上获取挂载点地址。</td></tr><tr>    <td>share</td><td>SMB文件系统的共享目录名称，不支持变更。</td></tr><tr>    <td>挂载目录</td><td>你要挂载的目标路径，例如：/mnt/sharepath。</td></tr><tr>    <td>挂载选项</td>    <td>        <h5>通过添加-o参数指定挂载必选选项：</h5>    <ul>    <li>vers：支持2.0及以上协议版本。</li>    <li>guest：只支持基于ntlm认证协议的客户端挂载。</li>    <li>rsize：用来设置读数据包的最大限制。一般需要设置成1048576（1 MB）。</li>    <li>wsize：用来设置写数据包的最大限制，一般需要设置成1048576（1 MB）。</li>    <h5>通过添加-o参数指定挂载可选选项：</h5>    <li>uid：挂载成功后，文件所属的用户。如果未设置uid，则默认uid=0。</li>    <li>gid：挂载成功后，文件所属的用户组。如果未设置gid，则默认gid=0。</li>    <li>dir_mode：向用户授予指定目录的读取、写入和执行权限。必须以0开头，例如：0755、0644等。如果未设置dir_mode，则默认dir_mode=0755。</li>    <li>file_mode：向用户授予普通文件的读取、写入和执行权限。必须以0开头，例如：0755、0644等。如果未设置file_mode，则默认file_mode=0755。</li>    <li>mfsymlinks：支持symbol link功能。</li>    <li>cache：</li>        <ul>            <li type="disc">cache=strict：设置SMB文件系统使用客户端缓存。如果未设置cache，则默认cache=strict。</li>            <li type="disc">cache=none：设置SMB文件系统不使用客户端缓存。</li>        </ul>    <li>atime|relatime：如果您的业务对文件的访问时间非极度敏感，请勿使用atime选项，默认采用relatime方式挂载。</li>    </ul>    </td></tr></table><li>执行<code>mount -l</code>命令，查看挂载结果。<br>挂载成功后，您可以执行<code>df -h</code>.命令，查看当前文件系统的容量信息。</li></ol><h3 id="2-（可选）自动挂载文件系统"><a href="#2-（可选）自动挂载文件系统" class="headerlink" title="2. （可选）自动挂载文件系统"></a>2. （可选）自动挂载文件系统</h3><ol><li><p>编辑<code>/etc/fstab</code>文件，添加类似下面的一行：</p></li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//SERVER/SHARE /mnt/mount_point cifs vers=3,credentials=/home/USERNAME/.smbcredentials,uid=0,gid=0,dir_mode=0755,file_mode=0755,mfsymlinks,cache=strict 0 0</span><br></pre></td></tr></table></figure><table><tr><th>参数</th><th>说明</th></tr><tr><td>0（wsize值后第一项）</td><td>非零值表示文件系统应由dump备份。对于NAS文件系统而言，此值默认为0。</td></tr><tr><td>0（wsize值后第二项）</td><td>该值表示fsck在启动时检查文件系统的顺序。对于NAS文件系统而言，此值默认为0，表示fsck不应在启动时运行。</td></tr></table><li>这里需要创建一个包含用户名和密码的文件</li><p><code>/home/USERNAME/.smbcredentials</code><br>文件内容例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=USERNAME</span><br><span class="line">password=PASSWORD</span><br></pre></td></tr></table></figure><li>设置文件权限：</li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 /home/USERNAME/.smbcredentials</span><br></pre></td></tr></table></figure><li>执行<code>reboot</code>命令，重启服务器,验证自动挂载配置成功。</li>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇：在GitHub上使用Hexo搭建个人博客</title>
      <link href="/2021/10/29/%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E5%9C%A8GitHub%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/29/%E7%AC%AC%E4%B8%80%E7%AF%87%EF%BC%9A%E5%9C%A8GitHub%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在这之前你需要已经有以下准备：</p><ul><li>先拥有一个GitHub的账号，没有可以注册一个；</li><li>合适的工作环境（Mac、Windows等）；</li><li>在桌面环境安装node.js、git，安装方式很简单，可以自行百度或Google。</li></ul><p>本文所使用的环境：</p><ul><li>Windows11</li><li>node.js 14.8.1</li><li>node.js 2.33.1</li><li>Hexo 5.4.0</li></ul><h1 id="搭建GitHub博客"><a href="#搭建GitHub博客" class="headerlink" title="搭建GitHub博客"></a>搭建GitHub博客</h1><hr><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>你需要在自己的GitHub中创建一个名为username.github.io的仓库，username就是你自己的用户名（必须是你GitHub的用户名），因为一个GitHub账号只能创建一个博客，所以username如果不用你GitHub的用户名是无效的。</p><h2 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h2><ol><li>进入一个文件夹（随便一个），然后右键打开Git Bash Here<img src="Git Bash Here.png" width="50%" height="50%"></li><li>在git窗口中输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>邮件地址为GitHub账号注册时的邮件，之后你应该会需要按三次回车</li><li>不出意外的话你可以去这个目录下找到刚刚生成的密钥<code>&#39;C:\Users\计算机用户名\.ssh&#39;</code><img src="ssh.png">然后打开`id_rsa.pub`文件（我这里用notepad++打开），这个文件里面就是刚刚生成的密钥，Ctrl+A全选后复制到剪贴板，去GitHub配置</li><li>在GitHub主页点自己的头像选择<code>setting</code>，然后在左侧找到<code>SSH and GPG keys</code>选项,在<code>SSH keys</code>右边选择<code>new SSH key</code>，Title随便填，Key就是刚刚在<code>id_rsa.pub</code>里面复制的所有内容，最后点<code>Add SSH key</code></li><li>回到git的命令窗口测试SSH密钥是否配置成功，在git命令窗口中输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com  <span class="comment">#可以直接复制，不用改</span></span><br></pre></td></tr></table></figure>应该会有一次确认，输入<code>yes</code>后回车，如果你看到<code>Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>这句话，恭喜你已经配置好了SSH密钥。</li></ol><h1 id="生成本地Hexo博客"><a href="#生成本地Hexo博客" class="headerlink" title="生成本地Hexo博客"></a>生成本地Hexo博客</h1><hr><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul><li>你需要建立一个文件夹去存放你的博客文件，建议使用英文名的文件夹，我这里直接在桌面创建一个名为<code>blogs</code>的文件夹，然后一定要打开这个文件夹，在文件夹内的空白处再次打开<code>Git Bash Here</code><img src="Git Bash Here.png" width="50%" height="50%"></li><li>在命令窗口中输入以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli <span class="comment">#安装Hexo</span></span><br><span class="line">hexo init <span class="comment">#在blogs文件夹内下载hexo的本地文件</span></span><br></pre></td></tr></table></figure></li><li>你还可能用到以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">#生成静态文件，是hexo generate的缩写，生成的文件都在public内</span></span><br><span class="line">hexo s <span class="comment">#启动本地hexo服务，是hexo server的缩写</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存文件和生成的静态文件</span></span><br><span class="line"><span class="comment">#hexo s启动本地服务后你可以在浏览器中输入`http://localhost:4000`来预览博客</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="将博客部署到GitHub仓库"><a href="#将博客部署到GitHub仓库" class="headerlink" title="将博客部署到GitHub仓库"></a>将博客部署到GitHub仓库</h1><hr><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ul><li>在博客的根目录下（也就是刚刚创建的blogs文件夹内）找到<code>_config.yml</code>并用notepad++打开，在文件的最下面找到<code>deploy</code>并删除（包括子项），然后根据自己的信息重新填入。(像下面这样)<img src="deploy.png"></li><li><code>type</code>和<code>branch</code>和上图一样，需要注意的是，你可能会在2020年或更早的教程中看到<code>branch</code>的值被记录为<code>master</code>，这是因为GitHub在2020年10月1日宣布上的新库都用<code>main</code>命名，取代原来的<code>master</code></li><li>上图中还有一条属性<code>repository</code>，它应该被记录为博客仓库的地址，应该去你的仓库找。<img src="repository.png" width="50%" height="50%"></li></ul><h2 id="安装自动部署工具"><a href="#安装自动部署工具" class="headerlink" title="安装自动部署工具"></a>安装自动部署工具</h2><p>还是在博客的根目录下打开git命令窗口，输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="将博客部署到仓库"><a href="#将博客部署到仓库" class="headerlink" title="将博客部署到仓库"></a>将博客部署到仓库</h2><ul><li>如果你已经在本地写了文章或做了更改的话你应该先生成静态文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li>然后将你的博客部署到GitHub的仓<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>到此为止你已经将你的博客部署到了GitHub的仓库，你可以在仓库中找到你的博客网址，之后可以直接输入网址访问你的博客。<img src="link.png" width="50%" height="50%">在下面找到`GitHub Pages`点击`Check it out here!`就可以看到` Your site is published at ···`，这个就是你的博客地址。</li></ul><h2 id="域名解析-可选"><a href="#域名解析-可选" class="headerlink" title="域名解析(可选)"></a>域名解析(可选)</h2><ul><li>如果你不想用上面的连接访问博客，你也可以将你的域名解析到博客地址，以后就可以直接用域名访问博客了</li><li>首先你需要有一个域名，可以自己去实名注册一个，一般注册域名都需要备案，个人域名的话大概一个星期内可以审核通过</li><li>然后将你的域名解析成你的仓库地址<table><thead><tr><th align="center">解析内容</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">记录类型</td><td align="center">CNAME</td></tr><tr><td align="center">记录值</td><td align="center"><code>username.github.io</code></td></tr></tbody></table></li><li>最后在你的仓库根目录下创建一个名为<code>CNAME</code>的文件，没有后缀名，内容只写你的域名<br><img src="CNAME1.png" width="30%" height="30%"><img src="CNAME2.png" width="30%" height="30%"></li></ul><p><strong>本篇到这里相信你也已经搭好了你的Hexo博客框架，但是这仅仅是一个雏形，需要优化和修改的地方还有很多。加油！</strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
